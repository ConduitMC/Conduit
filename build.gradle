import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://repo.conduit.systems/repository/releases/"
        }
    }
    dependencies {
        classpath "systems.conduit:Stream:1.0.3"
    }
}
plugins {
    id "checkstyle"
}
apply plugin: "Stream"

dependencies {
    compile project(":shared")

    // Minecraft Version Support
//    subprojects.forEach{sub ->
//        compile sub
//    }


    compile project(":v116_common")
    compile project(":v1.16")
    compile project(":v1.16.2")
}

conduit {
    version = null
    minecraft = "1.16.5"
    java = "1.8"
}

group = theGroup
version = theVersion

checkstyle {
    configFile = file("$rootDir/checkstyle.xml")
}

task processSource(type: Sync) {
    from sourceSets.main.java
    inputs.property "version", version
    filter(ReplaceTokens, tokens: [VERSION: version])
    into "$buildDir/src"
}

task generateMixinDefinitions(type: Sync) {
    def mixinDefinitions = new File("$rootDir/src/main/resources/mixin_definitions.json")
    def mixinDefinitionsJson = new JsonSlurper().parseText(mixinDefinitions.text)

    Map<String, List<String>> dependenciesMap = new HashMap()

    for (ver in mixinDefinitionsJson.keySet()) {
        def version = (String) ver
        def mixinDefinitionData = mixinDefinitionsJson[version]

        // First, get the set of known mixins from the definition.
        def appliedMixins = (List) mixinDefinitionData["mixins"]
        def inheritsFrom = mixinDefinitionData["inherits"]
        def allVersions = (List) mixinDefinitionData["otherVersions"]
        if (allVersions == null) allVersions = new ArrayList()
        allVersions.add(version)

        // Next, we need to build the json meta file to be loaded later by Stream.
        if (inheritsFrom != null) {
            List<String> currentDependencies = dependenciesMap.getOrDefault(version, new ArrayList<String>())
            currentDependencies.addAll(inheritsFrom)

            allVersions.forEach{ dependenciesMap.put((String) it, currentDependencies) }
        }
        // Now that we have handled the basic parts of dependencies, we can actually build the mixin file.
        Map<String, Object> mixinFile = new HashMap()
        mixinFile.put("required", true)
        mixinFile.put("minVersion", "0.6.15")
        mixinFile.put("package", mixinDefinitionData["mixin_path"])
        mixinFile.put("target", "@env(DEFAULT)")
        mixinFile.put("compatibilityLevel", "JAVA_8")
        mixinFile.put("mixins", appliedMixins)

        allVersions.each {
            def readyToOutput = JsonOutput.prettyPrint(JsonOutput.toJson(mixinFile))
            def mixinOutputFile = new File("$rootDir/src/main/resources/mixins.conduit.${it.replace(".", "")}.json")
            mixinOutputFile.write(readyToOutput)
        }
    }

    def readyToOutput = JsonOutput.prettyPrint(JsonOutput.toJson(dependenciesMap))
    def dependenciesOutputFile = new File("$rootDir/src/main/resources/mixin_dependencies.json")
    dependenciesOutputFile.write(readyToOutput)
}

compileJava {
    source = processSource.outputs
}

java {
    withSourcesJar()
}

jar {
    subprojects.forEach{sub ->
        dependsOn(sub.name + ":classes")
        from {sub.sourceSets.main.output.collect()}
    }
}

task copyResources {
    copy {
        from "build/resources/main"
        into "build/classes/java/main"
    }
}

compileJava.doLast {
    tasks.copyResources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username System.getProperty("MAVEN_USER") ?: "ci"
                password System.getProperty("MAVEN_PASSWORD") ?: "password"
            }
            url "https://repo.conduit.systems/repository/releases/"
        }
    }
}